// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
   output   = "../src/app/generated/prisma"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id        String   @id @default(cuid())
   fname      String?
   lname      String?
   email     String?  @unique
   password  String?
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   deprecated Boolean? @default(false)
   deprecatedAt DateTime?
   verified   Boolean? @default(false)
   verifyingLinkSentAt DateTime?
   tasks    Task[]
   teams UsersOnTeams[]
}

model Task {
   id        String   @id @default(cuid())
   title     String?
   description String?
   status    TaskStatus @default(PENDING)
   priority  TaskPriority @default(MEDIUM)
   dueDate   DateTime?
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   order     Int @default(autoincrement())
   assignedTo String[]
   repeating Boolean? @default(false)
   repeatInterval String? // e.g., "daily", "weekly", "monthly"
   repeatUntil DateTime?
   repeatDay Int? //1: Sunday, 2: Monday, ..., 7: Saturday
   userId    String? // creator of the task
   teamId    String? // team to which the task belongs
   user      User?    @relation(fields: [userId], references: [id])
   team     Team?     @relation(fields: [teamId], references: [id])
}

model Team {
   id        String   @id @default(cuid())
   name      String?
   description String?
   tasks    Task[]
   users UsersOnTeams[]
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model UsersOnTeams {
   id        String   @id @default(cuid())
   userId    String?
   teamId    String?
   user      User?    @relation(fields: [userId], references: [id])
   team     Team?     @relation(fields: [teamId], references: [id])
}


enum TaskStatus {
   PENDING
   IN_PROGRESS
   COMPLETED
}

enum TaskPriority {
   LOW
   MEDIUM
   HIGH
}